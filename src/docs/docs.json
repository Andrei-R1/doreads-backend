{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Doreads API",
    "description": "",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [{ "url": "" }],
  "tags": [
    {
      "name": "User Auth",
      "description": "Authentication."
    },
    {
      "name": "Student",
      "description": "All about student Data, for access to students you must have an ACCESS TOKEN."
    },
    {
      "name": "Book",
      "description": "All about book Data, for access to books you must have an ACCESS TOKEN."
    },
    {
      "name": "BookTracker",
      "description": "Information about the books, for access to infromation about the books you must have an ACCESS TOKEN."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["User Auth"],
        "summary": "Create a new user account",
        "description": "Create a new user account",
        "requestBody": {
          "description": "Create a new user account, the role is optional => 'LIBRARIAN' OR 'ADMIN'.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/registerBody"
              }
            },
            "required": true
          }
        },
        "responses": {
          "200": {
            "description": "User successfully registered"
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "User already exists"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["User Auth"],
        "summary": "Log in to an existing user account",
        "description": "Log in to an existing user account",
        "requestBody": {
          "description": "Log in to an existing user account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/loginBody"
              }
            },
            "required": true
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/authResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "User not authenticated"
          }
        }
      }
    },
    "/auth/logout": {
      "get":  {
        "tags":["User Auth"],
        "summary": "Log out of an existing user account",
        "description": "Log out of an existing user account",
        "security":[
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged out"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token de autenticación JWT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]

      }
    },
    "/auth/refresh-token": {
      "post": {
        "tags": ["User Auth"],
        "summary": "A refresh token Form",
        "description": "A refresh token Form",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create a new token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/refreshTokenBody"
              }
            },
            "required": true
          }
        },
        "responses": {
          "200": {
            "description": "JWT token successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/authResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "User not authenticated"
          }
        }
      }
    },
    "/auth/profile":  {
      "get":{
        "tags":["User Auth"],
        "summary": "Get the profile of the logged in user",
        "description": "Get the profile of the logged in user",
        "security":[
          {
            "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
          "description": "User profile successfully retrieved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/profileResponse"
              }
            }
          }
        },
        "401": {
          "description": "User not authenticated"
        },
        "403": {
          "description": "User not authorized"
        },
        "404": {
          "description": "User not found"
        }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token de autenticación JWT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/student/register": {
      "post": {
        "tags": ["Student"],
        "summary": "Create a new student",
        "description": "Create a new student with the provided information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Student object to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/studentregister"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/student": {
      "get": {
        "tags": ["Student"],
        "summary": "Get a list of all students, including optional search and filter here",
        "description": "Get a list of all students with optional search, orderBy, and sortBy parameters",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search parameter to filter students by name or email",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order students by (id, code, name, email, phone)",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string",
              "enum": ["id"," code", "name", "email", "phone"]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort order for ordered results (asc, desc)",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name":"page",
            "in":"query",
            "description":"Page number to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          },
          {
            "name":"size",
            "in":"query",
            "description":"Number of records to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "List of all students",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          }
        }
      }
    },
    "/student/{studentId}/change-status/{status}": {
      "get": {
        "tags": ["Student"],
        "summary": "Change student status by ID",
        "description": "Get the current status of a student by their ID and new status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "ID of the student to change status",
            "required": true,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "New status to update the student",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["ACTIVE", "BLOCKED", "INACTIVE"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changed student Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          }
        }
      }
    },
    "/student/{id}": {
      "get": {
        "tags": ["Student"],
        "summary": "Get a student by ID",
        "description": "Get a student by ID with authentication token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the student to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "put": {
        "tags": ["Student"],
        "summary": "Update student by ID",
        "description": "Update student details by providing the student ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of student to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Student object to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/studentupdatebody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated student details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or request body does not match schema"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized to update student details"
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "delete": {
        "tags": ["Student"],
        "summary": "Delete a student by ID",
        "description": "Delete a student by ID with authentication token required",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the student to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Student deleted"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Student not found"
          }
        }
      }
    },
    "/book/register": {
      "post": {
        "tags": ["Book"],
        "summary": "Create a new Book",
        "description": "Create a new Book with the provided information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Book object to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/bookregister"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book Registred successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/book/{id}": {
      "get":{
        "tags":["Book"],
        "summary":"Get book by ID",
        "description":"Get book by ID with authentication token",
        "security":[
          {
            "bearerAuth":[]
          }
        ],
        "parameters":[
          {
            "name":"id",
            "in":"path",
            "description":"ID of the book to get",
            "required":true,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          }
        ],
        "responses":{
          "200":{
            "description":"Book found",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Book"
                }
              }
            }
          },
          "401":{
            "description":"User not authenticated"
          },
          "403":{
            "description":"User not authorized"
          },
          "404":{
            "description":"Book not found"
          }
        }
      },
      "put": {
        "tags": ["Book"],
        "summary": "Update book by ID",
        "description": "Update book details by providing the book ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Book object to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/bookregister"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated student details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied or request body does not match schema"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized to update book details"
          },
          "404": {
            "description": "book not found"
          }
        }
      },
      "delete": {
        "tags": ["Book"],
        "summary": "Delete a book by ID",
        "description": "Delete a book by ID with authentication token required",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "book deleted"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "book not found"
          }
        }
      }
    },
    "/book": {
      "get": {
        "tags": ["Book"],
        "summary": "Get all books",
        "description": "Get all books with authentication token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search parameter to filter book by isbn or title",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order book",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort order for ordered results (asc, desc)",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }, 
          {
            "name":"page",
            "in":"query",
            "description":"Page number to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          },
          {
            "name":"size",
            "in":"query",
            "description":"Number of records to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "Books found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Books not found"
          }
        }
      }
    },
    "/book/tracker/{bookid}/add/{quantity}": {
      "post": {
        "tags": ["BookTracker"],
        "summary": "Create a new Book",
        "description": "Create a new Book with the provided information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Book object to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/bookadd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book Registred successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookTracker"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/book/tracker/{bookId}/change-status/{status}": {
      "get": {
        "tags": ["BookTracker"],
        "summary": "Change book status by ID",
        "description": "Get the current status of a book by their ID and new status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "description": "ID of the book to change status",
            "required": true,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "New status to update the book",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["AVAIBLE", "LOANED", "UNAVAILABLE"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Changed book Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookTracker"
                }
              }
            }
          },
          "404": {
            "description": "book not found"
          }
        }
      }
    },
    "/book/tracker/{id}": {
      "get": {
        "tags": ["BookTracker"],
        "summary": "Get book details by ID",
        "description": "Get book details by providing the book ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of book to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookTracker"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized to access book details"
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "tags": ["BookTracker"],
        "summary": "Delete a book by ID",
        "description": "Delete a book by ID with authentication token required",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Book deleted"
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },    
          "404": {
            "description": "book not found"
          }
        }
      }
    },
    "/book/tracker/": {
      "get": {
        "tags": ["BookTracker"],
        "summary": "Get all books",
        "description": "Get all books with authentication token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search parameter to filter bookTracker by code",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Field to order book",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort order for ordered results (asc, desc)",
            "required": false,
            "readOnly": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name":"page",
            "in":"query",
            "description":"Page number to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          },
          {
            "name":"size",
            "in":"query",
            "description":"Number of records to get",
            "required":false,
            "readOnly":false,
            "schema":{
              "type":"integer",
              "format":"int64"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "Books found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookTracker"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          },
          "403": {
            "description": "User not authorized"
          },
          "404": {
            "description": "Books not found"
          }
        }
      }
    }
  },
  
    

  "components": {





    "studentregister": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "studentupdatebody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "status":{
          "type": "string"
        }
      }
    },
    "loginBody": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "refreshTokenBody": {
      "type": "object",
      "required": ["refreshToken"],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },

    "authResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "registerBody": {
      "type": "object",
      "required": ["email", "password", "name"],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "bookregister": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "isbn": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "year": {
          "type": "integer"
        },
        "picture": {
          "type": "string"
        },
        "editorial": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "bookadd": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "bookId": {
          "type": "integer"
        }
      }
    },
    "profileResponse":{
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "type": "string",
          "enum": ["ADMIN", "LIBRARIAN"]
        },
        "createdAt":{
          "type": "string",
          "format":"date-time"
        },
        "updatedAt":{
          "type": "string",
          "format":"date-time"
      }
    }
    },







    "schemas": {

      "User": {
        "type": "object",
        "required": ["id", "email", "name", "password", "role", "createdAt", "updatedAt"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["ADMIN", "LIBRARIAN"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },

      "Student": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "INACTIVE"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "loan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Loan"
            }
          },
          "penalty": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Penalty"
            }
          }
        }
      },

      "Book": {
        "type": "object",
        "required": [
          "id",
          "title",
          "author",
          "isbn",
          "category",
          "year",
          "cover",
          "editorial",
          "language",
          "createdAt",
          "updatedAt",
          "tracker"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "isbn": {
            "type": "int"
          },
          "category": {
            "type": "string"
          },
          "year": {
            "type": "int"
          },
          "cover?":{
            "type": "string"
          },
          "editorial?": {
            "type": "string?"
          },
          "language": {
            "type": "String"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "tracker": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookTracker"
            }
          }
        }
      },
      "BookTracker": {
        "type": "object",
        "required": ["id", "code", "status", "bookId", "createdAt", "updatedAt", "loans"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "int"
          },
          "status": {
            "type": "string",
            "enum": ["AVAIBLE", "LOANED","UNAVAILABLE"]
          },
          "bookId": {
            "type": "int"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "loans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Loan"
            }
          }
        }
      },
      "Penalty": {
        "type": "object",
        "required": ["id", "amount", "status", "createdAt", "updatedAt", "student", "studentId"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "float"
          },
          "status": {
            "type": "string",
            "enum": ["PAYED", "UNPAYED"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "student": {
            "$ref": "#/components/schemas/Student"
          },
          "studentId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Loan": {
        "type": "object",
        "required": ["id", "status", "borrowed", "returned", "estimateReturn", "delayDays", "trackerId", "studentId", "createdAt", "updatedAt", "student", "tracker"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": ["IN_PROGRESS", "RETURNED"]
          },
          "borrowed": {
            "type": "string",
            "format": "date-time"
          },
          "returned": {
            "type": "string",
            "format": "date-time"
          },
          "estimateReturn": {
            "type": "string",
            "format": "date-time"
          },
          "delayDays": {
            "type": "integer",
            "format": "int64"
          },
          "trackerId": {
            "type": "integer",
            "format": "int64"
          },
          "studentId": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "student": {
            "$ref": "#/components/schemas/Student"
          },
          "tracker": {
            "$ref": "#/components/schemas/BookTracker"
          }
        }
      }
      },
      

      "securitySchemes": {
        "bearerAuth": {
          "type":"http",
          "name": "authorization",
          "in": "header",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  }