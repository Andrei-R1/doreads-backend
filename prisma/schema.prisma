// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LIBRARIAN
}

enum BookStatus {
  AVAILABLE
  LOANED
  UNAVAILABLE
}

enum StudentStatus {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum PenaltyStatus {
  PAID
  UNPAYED
}


enum LoanStatus {
  IN_PROGRESS
  COMPLETED
  DELAYED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(LIBRARIAN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id        Int        @id @default(autoincrement())
  title     String
  author    String
  isbn      String     @unique
  category  String[] 
  year      Int
  cover   String?
  editorial String?
  language  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tracker  BookTracker[]
}

model BookTracker {
  id        Int        @id @default(autoincrement())
  code      String     @unique
  status    BookStatus @default(AVAILABLE)
  bookId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  book      Book       @relation(fields: [bookId], references: [id])
  loans      Loan[]
}

model Student {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  name      String
  email     String        @unique
  phone     String
  status    StudentStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  loan      Loan[]
  penalty   Penalty[]
}

model Penalty {
  id        Int           @id @default(autoincrement())
  amount    Float
  status    PenaltyStatus @default(UNPAYED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  student   Student       @relation(fields: [studentId], references: [id])
  studentId Int
}

model Loan {
  id         Int      @id @default(autoincrement())
  status LoanStatus @default(IN_PROGRESS)
  borrowed DateTime
  returned DateTime
  estimateReturn DateTime
  delayDays Int
  trackerId Int
  studentId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student    Student  @relation(fields: [studentId], references: [id])
  tracker   BookTracker @relation(fields: [trackerId], references: [id])
}
